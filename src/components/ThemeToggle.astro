<script is:inline>
    const theme = (() => {
        const storedTheme = localStorage.getItem('theme');
        if (typeof localStorage !== 'undefined' && storedTheme) {
            return storedTheme;
        }
        return window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light';
    })();

    if (theme === 'dark') {
        document.documentElement.classList.add('dark');
    }
</script>

<button id="theme-toggle" class="w-8 h-8 -mr-2 flex items-center justify-center" aria-label="Toggle color theme" aria-pressed="false">
    <svg xmlns="http://www.w3.org/2000/svg" class="w-5 h-5 fill-current transition-all duration-300" viewBox="0 0 24 24" aria-hidden="true">
        <!-- Sun icon -->
        <path
            class="dark:hidden"
            d="M12 7c-2.76 0-5 2.24-5 5s2.24 5 5 5 5-2.24 5-5-2.24-5-5-5zM2 13h2c.55 0 1-.45 1-1s-.45-1-1-1H2c-.55 0-1 .45-1 1s.45 1 1 1zm18 0h2c.55 0 1-.45 1-1s-.45-1-1-1h-2c-.55 0-1 .45-1 1s.45 1 1 1zM11 2v2c0 .55.45 1 1 1s1-.45 1-1V2c0-.55-.45-1-1-1s-1 .45-1 1zm0 18v2c0 .55.45 1 1 1s1-.45 1-1v-2c0-.55-.45-1-1-1s-1 .45-1 1zM5.99 4.58c-.39-.39-1.03-.39-1.41 0-.39.39-.39 1.03 0 1.41l1.06 1.06c.39.39 1.03.39 1.41 0s.39-1.03 0-1.41L5.99 4.58zm12.37 12.37c-.39-.39-1.03-.39-1.41 0-.39.39-.39 1.03 0 1.41l1.06 1.06c.39.39 1.03.39 1.41 0 .39-.39.39-1.03 0-1.41l-1.06-1.06zm1.06-10.96c.39-.39.39-1.03 0-1.41-.39-.39-1.03-.39-1.41 0l-1.06 1.06c-.39.39-.39 1.03 0 1.41s1.03.39 1.41 0l1.06-1.06zM7.05 18.36c.39-.39.39-1.03 0-1.41-.39-.39-1.03-.39-1.41 0l-1.06 1.06c-.39.39-.39 1.03 0 1.41s1.03.39 1.41 0l1.06-1.06z"
        ></path>
        <!-- Moon icon -->
        <path
            class="hidden dark:block"
            d="M12 3c-4.97 0-9 4.03-9 9s4.03 9 9 9 9-4.03 9-9c0-.46-.04-.92-.1-1.36-.98 1.37-2.58 2.26-4.4 2.26-3.03 0-5.5-2.47-5.5-5.5 0-1.82.89-3.42 2.26-4.4-.44-.06-.9-.1-1.36-.1z"
        ></path>
    </svg>
</button>

<script>
    const getTheme = (): 'light' | 'dark' => {
        const storedTheme = localStorage.getItem('theme') as 'light' | 'dark' | null;
        if (typeof localStorage !== 'undefined' && storedTheme) return storedTheme;

        return window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light';
    };

    const applyTheme = (theme: 'light' | 'dark') => {
        document.documentElement.classList.toggle('dark', theme === 'dark');
        localStorage.setItem('theme', theme);

        // Update button state
        const button = document.getElementById('theme-toggle');
        if (button) {
            button.setAttribute('aria-pressed', theme === 'dark' ? 'true' : 'false');
        }
    };

    // Initialize theme
    const initializeTheme = () => {
        const theme = getTheme();
        applyTheme(theme);

        window.matchMedia('(prefers-color-scheme: dark)').addEventListener('change', (e) => {
            if (!localStorage.getItem('theme')) {
                applyTheme(e.matches ? 'dark' : 'light');
            }
        });
    };

    // Toggle theme handler
    const handleToggleClick = () => applyTheme(document.documentElement.classList.contains('dark') ? 'light' : 'dark');

    // Event listeners
    document.addEventListener('astro:page-load', () => {
        initializeTheme();
        document.getElementById('theme-toggle')?.addEventListener('click', handleToggleClick);
    });

    // Cleanup
    document.addEventListener('astro:before-swap', () => {
        document.getElementById('theme-toggle')?.removeEventListener('click', handleToggleClick);
    });
</script>

<style>
    #theme-toggle:hover svg {
        transform: rotate(15deg) scale(1.3);
    }

    #theme-toggle:focus-visible {
        outline: 2px solid currentColor;
        outline-offset: 2px;
        border-radius: 50%;
    }
</style>
