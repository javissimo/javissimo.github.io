---
import { Image } from 'astro:assets';
import { getCollection } from 'astro:content';
import BaseLayout from '../../layouts/BaseLayout.astro';
import { getAlbumImages } from '../../utils/albums';
export async function getStaticPaths() {
    const albums = await getCollection('albums');

    const paths = Object.values(albums).map((album) => {
        return {
            params: {
                id: album.id
            },
            props: {
                album
            }
        };
    });

    return paths;
}

const { album } = Astro.props;
const images = await getAlbumImages(album.id);
---

<BaseLayout title={album.data.title}>
    <div>
        <h1 class="mb-12 text-4xl leading-tight font-serif italic sm:mb-16 sm:text-4xl">{album.data.title}</h1>

        {album.data.description && <p class="text-xl my-4">{album.data.description}</p>}

        <div class="mx-auto container my-8 sm:columns-1 md:columns-2 lg:columns-3 text-center" id="gallery">
            {
                images.map((image) => (
                    <Image
                        src={image}
                        alt={`Image from ${album.data.title} album`}
                        format="webp"
                        quality={75}
                        class="rounded mb-6 border md:hover:opacity-85 border-transparent transition-all duration-300 ease-in-out hover:shadow-lg md:cursor-pointer w-full"
                        loading="lazy"
                        decoding="async"
                        data-album-image
                    />
                ))
            }
        </div>

        <p class="text-lg my-4 text-center">
            <a href="/gallery/" class="leading-tight font-serif hover:underline">Volver a la galer√≠a</a>
        </p>
    </div>
</BaseLayout>

<script>
    const DESKTOP_MIN_WIDTH = 1024;
    const isDesktop = window.innerWidth >= DESKTOP_MIN_WIDTH;

    // Only create modal if on desktop
    if (isDesktop) {
        const modalHTML = `
            <div id="imageModal" class="fixed inset-0 bg-black bg-opacity-75 hidden items-center justify-center z-50">
                <img id="modalImage" class="max-h-[90vh] max-w-[90vw] object-contain" src="" alt="Modal image" />
            </div>
        `;
        document.body.insertAdjacentHTML('beforeend', modalHTML);
    }

    // Cache DOM elements
    const gallery = document.getElementById('gallery');
    const modal = isDesktop ? document.getElementById('imageModal') : null;
    const modalImage = isDesktop ? document.getElementById('modalImage') : null;

    // Use event delegation for click handling
    if (isDesktop) {
        gallery.addEventListener('click', (e) => {
            const image = e.target.closest('[data-album-image]');
            if (image) {
                openModal(image.src);
            }
        });

        modal.addEventListener('click', (e) => {
            if (e.target === modal) {
                closeModal();
            }
        });

        // Close modal with escape key
        document.addEventListener('keydown', (e) => {
            if (e.key === 'Escape') closeModal();
        });
    } else {
        // Remove cursor-pointer class on mobile
        gallery.classList.remove('cursor-pointer');
    }

    function openModal(imageSrc) {
        modal.classList.remove('hidden');
        modal.classList.add('flex');
        modalImage.src = imageSrc;
        document.body.style.overflow = 'hidden';
    }

    function closeModal() {
        modal.classList.add('hidden');
        modal.classList.remove('flex');
        document.body.style.overflow = 'auto';
    }
</script>
